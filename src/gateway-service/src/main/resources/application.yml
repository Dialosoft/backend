
# APP configuration
app:
  security:
    jwt:
      secret-key: ${JWT_SECRET_KEY}
  # Open non-secured endpoints for the gateway
  openApiEndpoints:
    - /actuator
    - /dialosoft-api/auth/login
    - /dialosoft-api/auth/register
    - /dialosoft-api/auth/refresh-token
    - /dialosoft-api/user/test
    - /dialosoft-api/user-service/avatars
  uriServices:
    auth-microservice: lb://auth-microservice/
    user-microservice: lb://user-microservice/
    post-manager-microservice: lb://post-manager-microservice/
    management-microservice: lb://management-microservice/
  cacheableRoutes:
    - /user-service/get-user-info


# SPRING configuration
spring:
  main:
    web-application-type: reactive
  application:
    name: gateway-microservice
  devtools:
    restart:
      enabled: false
  data:
    redis:
      host: localhost
      port: ${REDIS_PORT_LOCAL:6379}
  netty:
    max-initial-line-length: 65536
    max-header-size: 65536
    max-chunk-size: 65536
#  docker:
#    compose:
#      enabled: true
#      file: ./docker-compose.yml
  cloud:
    gateway:

      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
      httpclient:
        pool:
          max-connections: 1000 # max allowed connections
          connection-timeout: 5000 # max allowed time to establish a connection
          response-timeout: 10000 # max allowed time to receive data from a connection
        max-header-size: 65536 # max allowed size of header
      retry:
        retries: 3
        backoff:
          first-backoff: 100ms # define the first initial delay between retries
          max-backoff: 1000ms # define the maximum delay between retries
      routes:
        - id: actuator_route
          uri: http://localhost:${server.port}
          predicates:
            - Path=/actuator/**
        - id: auth_service_hello_world_route
          uri: ${app.uriServices.auth-microservice}
          predicates:
            - Path=/dialosoft-api/hello-world
          filters:
            - AddRequestHeader=X-Request-Service, auth-microservice
            - StripPrefix=1 # remove '/dialosoft-api' before send request to the down service
            - name: JwtAuthenticationFilter
            - name: RoleBasedAuthorizationFilter
              args:
                  requiredRoles: ROLE_USER
        - id: auth_service_routes
          uri: ${app.uriServices.auth-microservice}
          predicates:
            - Path=/dialosoft-api/auth/**
          filters:
            - AddRequestHeader=X-Request-Service, auth-microservice
            - StripPrefix=1
#        - id: user_service_routes_swagger
#          uri: ${app.uriServices.auth-microservice}
#          predicates:
#            - Path=/dialosoft-api/user-service/swagger/index.html
#          filters:
#            - AddRequestHeader=X-Request-Service, user-microservice
#            - StripPrefix=1
#            - name: NonSpringServicesRoutingFilter
#              args:
#                belongServiceName: user-microservice
        - id: user_service_routes_free
          uri: ${app.uriServices.user-microservice}
          predicates:
            - Path=/dialosoft-api/user-service/avatars/**
          filters:
            - AddRequestHeader=X-Request-Service, user-microservice
            - StripPrefix=1
            - name: NonSpringServicesRoutingFilter
              args:
                belongServiceName: user-microservice
        - id: user_service_routes
          uri: ${app.uriServices.user-microservice}
          predicates:
            - Path=/dialosoft-api/user-service/**
          filters:
            - AddRequestHeader=X-Request-Service, user-microservice
            - StripPrefix=1
            - name: JwtAuthenticationFilter
            - name: RoleBasedAuthorizationFilter
              args:
                requiredRoles: ROLE_USER
            - name: NonSpringServicesRoutingFilter # must be the last filter due to first has to be applied token verification filters
              args:
                belongServiceName: user-microservice
            - name: CheckCacheRedisFilter
        - id: post_manager_service_routes
          uri: ${app.uriServices.post-manager-microservice}
          predicates:
            - Path=/dialosoft-api/post-manager-service
          filters:
            - AddRequestHeader=X-Request-Service, post-manager-microservice
            - StripPrefix=1
            - name: JwtAuthenticationFilter
            - name: RoleBasedAuthorizationFilter
              args:
                requiredRoles: ROLE_USER
        ## Management Service: Flussen
        - id: management-service_routes_free
          uri: ${app.uriServices.management-microservice}
          predicates:
            - Path=/dialosoft-api/management-service/categories/get-all-categories, /dialosoft-api/management-service/categories/get-category-id/**, /dialosoft-api/management-service/forums/get-all-forums, /dialosoft-api/management-service/forums/get-forum-id/**
          filters:
            - AddRequestHeader=X-Request-Service, management-microservice
            - StripPrefix=1
            - name: NonSpringServicesRoutingFilter
              args:
                belongServiceName: management-microservice
        - id: management-service_routes
          uri: ${app.uriServices.management-microservice}
          predicates:
            - Path=/dialosoft-api/management-service/**
          filters:
            - AddRequestHeader=X-Request-Service, management-microservice
            - StripPrefix=1
            - name: JwtAuthenticationFilter
            - name: RoleBasedAuthorizationFilter
              args:
                requiredRoles: ROLE_USER
            - name: NonSpringServicesRoutingFilter
              args:
                belongServiceName: management-microservice
        # * Other service template
#        - id: other_service_routes
#          uri: lb://other-microservice/
#          predicates:
#            - Path=/dialosoft-api/other/**
#          filters:
#            - AddRequestHeader=X-Request-Service, auth-microservice
#            - StripPrefix=1 # remove '/dialosoft-api' before send request to auth-service
#            - name: JwtAuthenticationFilter
#            - name: RoleBasedAuthorizationFilter
#              args:
#                requiredRoles: ROLE_USER # You can omit this, by default is ROLE_USER
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"

# Eureka client conf - Registry Service
eureka:
  client:
    transport:
      # Jersey HTTP client, which is the default transport client used by EurekaClient for HTTP communication
      jersey:
        # sets the maximum header size for Jersey, the HTTP client used by Eureka
        max-header-size: 65536

# SERVER configuration
server:
  port: 8080
  server:
    max-http-request-header-size: 65536

# LOGGING
logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.springframework.servlet: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.cloud.netflix.eureka: DEBUG
    reactor.netty: DEBUG
    org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping: DEBUG
    org.springframework.data.redis: DEBUG

# ACTUATOR
management:
  security:
    enabled: false
#  health:
#    circuitbreakers:
#      enabled: true
#    ratelimiters:
#      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    gateway:
      enabled: true
    health:
      show-details: always

# RESILIENCE4J
#resilience4j:
#  circuitbreaker:
#    instances:
#      redisService:
#        registerHealthIndicator: true
#        slidingWindowSize: 10
#        failureRateThreshold: 50
#        waitDurationInOpenState: 30s
#        permittedNumberOfCallsInHalfOpenState: 3
#        minimumNumberOfCalls: 5
#        automaticTransitionFromOpenToHalfOpenEnabled: true
#        recordExceptions:
#          - org.springframework.data.redis.RedisConnectionFailureException
#          - java.net.ConnectException

# SWAGGER
springdoc:
  enable-native-support: true
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    config-url: /v3/api-docs/swagger-config
    # Add microservices api-docs urls to expose them in swagger-ui
    urls:
      - url: /v3/api-docs
        name: API Gateway Service Swagger
        primaryName: API Gateway Service
      - url: /auth-service/v3/api-docs
        name: Auth Service Swagger
        primaryName: Auth Service Swagger
        belongServiceName: auth-microservice
      - url: /post-manager-service/v3/api-docs
        name: Post Manager Service Swagger
        primaryName: Post Manager Service Swagger
        belongServiceName: post-manager-microservice